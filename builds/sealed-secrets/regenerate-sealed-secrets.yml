#
# Build for regenerating sealed secrets
#
name: Regenerating sealed secrets
trigger: none
variables:
  kubernetesCluster: 'cnp-aks-sandbox-cluster'  # cnp-aks-cluster
  azureSubscription: azurerm-sandbox #azurerm-nonprod
  environment: sandbox # aat
  azureResourceGroup: cnp-aks-sandbox-rg
  keyvaultName: cftapps-sbox
jobs:
  - job: regenerate_sealed_secrets
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - task: AzureCLI@1
        displayName: 'AKS Sign in'
        inputs:
          azureSubscription: $(azureSubscription)
          scriptLocation: 'inlineScript'
          inlineScript: |
            az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster)
      - task: AzureKeyVault@1
        displayName: 'Get git secrets from Keyvault'
        inputs:
          azureSubscription:  $(azureSubscription)
          keyVaultName:   $(keyvaultName)
          secretsFilter: 'flux-github-username,flux-github-private-key'
      - task: Bash@3
        displayName: 'Install Kubeseal'
        inputs:
          targetType: inline
          script: |
            GOOS=$(go env GOOS)
            GOARCH=$(go env GOARCH)
            wget https://github.com/bitnami/sealed-secrets/releases/download/v0.5.1/kubeseal-$GOOS-$GOARCH
            sudo install -m 755 kubeseal-$GOOS-$GOARCH /usr/local/bin/kubeseal
      - task: Bash@3
        displayName: 'Setting up Git credentials'
        env:
          GITHUB_KEY: $(flux-github-private-key)
          GITHUB_USERNAME: $(flux-github-username)
        inputs:
          targetType: filePath
          filePath: scripts/setup-github-privatekey.sh
      - task: Bash@3
        displayName: 'Refresh sealed secrets from existing'
        inputs:
          targetType: inline
          script: |
            # Change to corresponding env path
            echo "cloning flux config"
            mkdir cnp-flux-config
            git clone https://github.com/hmcts/cnp-flux-config.git
            git checkout master
            cd cnp-flux-config/k8s/$(environment)

            #Create temporary directory
            mkdir tmp

            echo "fetching public cert for kubeseal "
            #fetch kubeseal cert
            kubeseal --fetch-cert --controller-namespace=admin --controller-name=sealed-secrets > pub-cert.pem

            #git status after changes
            echo "git status to checking if cert has changed"
            git status

            #Regenerate Sealed secrets from existing sealed secrets

            echo "Regenerating sealed secrets from existing secret"

            for i in $(kubectl get secret -A -o=jsonpath='{range .items[?(@.metadata.ownerReferences[0].kind=="SealedSecret")]}{.metadata.namespace}{":"}{.metadata.name}{" "}{end}'); do
            NAMESPACE=${i%:*}
            SECRET=${i##*:}
            kubectl get secret -n ${NAMESPACE} ${SECRET} -o json > tmp/${NAMESPACE}-${SECRET}-secret.json
            kubeseal --format=yaml --cert=pub-cert.pem <tmp/${NAMESPACE}-${SECRET}-secret.json> ${NAMESPACE}/${SECRET}.yaml
            done

            #delete tmp folder
            rm -rf tmp

            #git commit files
            echo "Attempting to commit files to git"
            git add .

            #git status after changes
            echo "checking git status before commiting"
            git status

            git commit -m "Regenerating Sealed secrets with latest certificate for $(environment)"
            git push