#
# Build for the Sandbox Testing AKS Cluster
#
name: Test AKS Pipeline
trigger: none
variables:
  environment: 'test'
  aksResourceGroup: 'cnp-test-aks-rg'
  aksClusterName: 'cnp-test-cluster'
  keyvaultName: 'infra-vault-sandbox'
  serviceConnection: 'azurerm-sandbox'
  aksParametersFile: 'arm/parameters/aks/test.json'
  helmVersion: '2.11.0'
  acrName: hmcts

jobs:
- job: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-ci.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

- job: DeployAKS
  dependsOn: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    aksServicePrincipalId: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalId']]
    aksServicePrincipalSecret: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalSecret']]
  steps:
  - task: AzureCLI@1
    displayName: 'Install AKS with Azure CLI'
    inputs:
      azureSubscription: azurerm-sandbox
      scriptLocation: 'inlineScript'
      inlineScript: |
        az extension add --name aks-preview
        az aks create \
          --resource-group cnp-test-aks-rg \
          --name cnp-test-cluster \
          --kubernetes-version 1.12.4 \
          --node-count 3 \
          --node-vm-size Standard_B8ms \
          --location uksouth \
          --network-plugin azure \
          --node-osdisk-size 100 \
          --dns-name-prefix cnp-aks-cl-cnp-aks-rg-1c4f07 \
          --vnet-subnet-id '/subscriptions/bf308a5c-0624-4334-8ff8-8dca9fd43783/resourceGroups/cnp-test-aks-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/aks-subnet' \
          --ssh-key-value 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDByksOKZjMovSnLZGIljdrs6bSvUNM514q/HCo5ITi1P/pMbARYHFl62AyxSrIuk+0RA2dYlzl6H1iluQa2bPT5PQqii9cA1XDnCBikkrLO2lMDG11Pu0cvDdYZNCrfgcpWZLy987mwOWchnWDGOdvIHv8Drx8eywL7Mzrx0wXS+vBOozUq0bN3ze9+mH6igRO/05e+r2PC+ohL4g0998qShvOoETU16bzcSm1TAKs6kCUPCnjj1y2/8nXAcYUKyesqSYx9brYhGbEPgE51IY6KQG24t7NNers17jqqgDAjO6a6d4jxgmJInLb5fziuelysOAP7pU0l0i8f9dtQu6H' \
          --service-principal $(aksServicePrincipalId) \
          --client-secret $(aksServicePrincipalSecret) \
          --enable-vmss \
          --enable-cluster-autoscaler \
          --min-count 3 \
          --max-count 35 \
          --max-pods 100 \
          --tags 'Team Name=CNP'
#  - template: ../tasks/deploy-aks-arm.yaml
#    parameters:
#      serviceConnection: $(serviceConnection)
#      aksResourceGroup: $(aksResourceGroup)
#      aksParametersFile: $(aksParametersFile)
#      aksServicePrincipalId: $(aksServicePrincipalId)
#      aksServicePrincipalSecret: $(aksServicePrincipalSecret)
  - template: ../steps/install-tiller.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - template: ../tasks/dashboard-rbac.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)

- job: InstallTraefik
  dependsOn: DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/configure-helm-client.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - template: ../tasks/traefik.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      environment: $(environment)

- job: InstallKured
  dependsOn: DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: AzureKeyVault@1
    displayName: 'Get secrets from Keyvault'
    inputs:
      azureSubscription: $(serviceConnection)
      keyVaultName: $(keyvaultName)
      secretsFilter: 'kured-slack-webhook-url'
  - template: ../steps/configure-helm-client.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - task: AzureCLI@1
    displayName: 'Configure Helm for ACR'
    inputs:
      azureSubscription: azurerm-nonprod
      scriptLocation: 'inlineScript'
      inlineScript: |
        az configure --defaults acr=$(acrName)
        az acr helm repo add --name $(acrName)
  - task: AzureCLI@1
    displayName: 'Install Kured'
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName)
        helm upgrade kured $(acrName)/kured --install --set slackWebhookUrl=$(kured-slack-webhook-url),slackUsername=$(aksClusterName)

- job: InstallServiceCatalog
  dependsOn:
  - Keyvault
  - DeployAKS
  condition: succeeded()
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    svcatServicePrincipalSubscriptionId: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalSubscriptionId']]
    svcatServicePrincipalId: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalId']]
    svcatServicePrincipalSecret: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalSecret']]
    svcatServicePrincipalTenantId: $[dependencies.Keyvault.outputs['exportKeyvault.svcatServicePrincipalTenantId']]
  steps:
  - template: ../steps/configure-helm-client.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - template: ../steps/service-catalog.yml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)