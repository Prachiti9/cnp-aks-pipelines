#
# Build for the Sandbox CI AKS Cluster
#
name: Sandbox AKS Pipeline
trigger: none
variables:
  environment: 'sandbox'
  aksResourceGroup: 'cnp-aks-sandbox-rg'
  aksClusterName: 'cnp-aks-sandbox-cluster'
  keyvaultName: 'infra-vault-sandbox'
  serviceConnection: 'azurerm-sandbox'
  aksParametersFile: 'arm/parameters/aks/sandbox.json'
  helmVersion: '2.12.0'
  acrName: hmcts

jobs:
- job: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - template: ../steps/keyvault-ci.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      keyvaultName: $(keyvaultName)

- job: DeployAKS
  dependsOn: Keyvault
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    aksServicePrincipalId: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalId']]
    aksServicePrincipalSecret: $[dependencies.Keyvault.outputs['exportKeyvault.aksServicePrincipalSecret']]
  steps:
  - template: ../tasks/deploy-aks-arm.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksParametersFile: $(aksParametersFile)
      aksServicePrincipalId: $(aksServicePrincipalId)
      aksServicePrincipalSecret: $(aksServicePrincipalSecret)
  - template: ../steps/install-tiller.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)
      helmVersion: $(helmVersion)
  - template: ../tasks/dashboard-rbac.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      aksResourceGroup: $(aksResourceGroup)
      aksClusterName: $(aksClusterName)

  - task: AzureCLI@1
      displayName: 'Create namespaces'
      inputs:
        azureSubscription: azurerm-sandbox
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite
          kubectl apply -f manifests/all/namespaces.yaml

  - task: DownloadSecureFile@1
    displayName: 'Download cluster sealed secret key'
    inputs:
      secureFile: sandbox-sealed-secrets-key.yaml

  - task: Bash@3
    displayName: 'Create sealed secrets key secret'
    inputs:
      targetType: inline
      failOnStderr: false
      script: |
        kubectl apply -f $(Agent.TempDirectory)/sandbox-sealed-secrets-key.yaml
        kubectl delete pod -n admin -l app.kubernetes.io/name=sealed-secrets || true

  - task: Bash@3
    displayName: 'Install Weave Flux'
    inputs:
      targetType: inline
      failOnStderr: false
      script: |
        helm repo add weaveworks https://weaveworks.github.io/flux
        helm upgrade flux weaveworks/flux --install --namespace admin -f helm/sandbox/flux.yaml --wait

  - task: DownloadSecureFile@1
    displayName: 'Download flux deploy key'
    inputs:
      secureFile: sandbox-flux-git-deploy.yaml

  - task: Bash@3
    displayName: 'Create flux deploy key secret'
    inputs:
      targetType: inline
      failOnStderr: false
      script: |
        kubectl -n admin delete secret flux-git-deploy
        kubectl create -f $(Agent.TempDirectory)/sandbox-flux-git-deploy.yaml
        kubectl -n admin delete $(kubectl get pod -o name -l app=flux -n admin)
